// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: urlshortener/v1/service.proto

package urlshortenerv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "zntr.io/hexagonal-bazel/api/urlshortener/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ShortenerServiceName is the fully-qualified name of the ShortenerService service.
	ShortenerServiceName = "urlshortener.v1.ShortenerService"
)

// ShortenerServiceClient is a client for the urlshortener.v1.ShortenerService service.
type ShortenerServiceClient interface {
	// Create a shortened link from the given URL.
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	// Resolve the shortened URL.
	Resolve(context.Context, *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error)
}

// NewShortenerServiceClient constructs a client for the urlshortener.v1.ShortenerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShortenerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ShortenerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shortenerServiceClient{
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/urlshortener.v1.ShortenerService/Create",
			opts...,
		),
		resolve: connect_go.NewClient[v1.ResolveRequest, v1.ResolveResponse](
			httpClient,
			baseURL+"/urlshortener.v1.ShortenerService/Resolve",
			opts...,
		),
	}
}

// shortenerServiceClient implements ShortenerServiceClient.
type shortenerServiceClient struct {
	create  *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	resolve *connect_go.Client[v1.ResolveRequest, v1.ResolveResponse]
}

// Create calls urlshortener.v1.ShortenerService.Create.
func (c *shortenerServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Resolve calls urlshortener.v1.ShortenerService.Resolve.
func (c *shortenerServiceClient) Resolve(ctx context.Context, req *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error) {
	return c.resolve.CallUnary(ctx, req)
}

// ShortenerServiceHandler is an implementation of the urlshortener.v1.ShortenerService service.
type ShortenerServiceHandler interface {
	// Create a shortened link from the given URL.
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	// Resolve the shortened URL.
	Resolve(context.Context, *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error)
}

// NewShortenerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShortenerServiceHandler(svc ShortenerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/urlshortener.v1.ShortenerService/Create", connect_go.NewUnaryHandler(
		"/urlshortener.v1.ShortenerService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/urlshortener.v1.ShortenerService/Resolve", connect_go.NewUnaryHandler(
		"/urlshortener.v1.ShortenerService/Resolve",
		svc.Resolve,
		opts...,
	))
	return "/urlshortener.v1.ShortenerService/", mux
}

// UnimplementedShortenerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShortenerServiceHandler struct{}

func (UnimplementedShortenerServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("urlshortener.v1.ShortenerService.Create is not implemented"))
}

func (UnimplementedShortenerServiceHandler) Resolve(context.Context, *connect_go.Request[v1.ResolveRequest]) (*connect_go.Response[v1.ResolveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("urlshortener.v1.ShortenerService.Resolve is not implemented"))
}
